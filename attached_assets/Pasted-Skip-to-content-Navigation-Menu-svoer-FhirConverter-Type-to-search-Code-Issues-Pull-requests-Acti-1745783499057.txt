Skip to content
Navigation Menu
svoer
FhirConverter

Type / to search
Code
Issues
Pull requests
Actions
Projects
Security
Insights
Settings
Owner avatar
FhirConverter
Private
svoer/FhirConverter
Go to file
t
Name		
author
sebastienvoerma
Implement database schema and API endpoints for application management
b95ffe2
 · 
4 minutes ago
FHIRHub_dist
Implement database schema and API endpoints for application management
4 minutes ago
api
Initial commit
17 minutes ago
attached_assets
Initial commit
17 minutes ago
backend
Initial commit
17 minutes ago
data
Initial commit
17 minutes ago
docs
Initial commit
17 minutes ago
french_terminology
Initial commit
17 minutes ago
frontend
Initial commit
17 minutes ago
server
Initial commit
17 minutes ago
src
Initial commit
17 minutes ago
.replit
Initial commit
17 minutes ago
FHIRHub_distribution.tar.gz
Add installation checklist and French terminology reference documents
15 minutes ago
LISEZMOI.md
Initial commit
17 minutes ago
README.md
Initial commit
17 minutes ago
api.js
Initial commit
17 minutes ago
app.js
Initial commit
17 minutes ago
clean_project.sh
Initial commit
17 minutes ago
create_package.sh
Initial commit
17 minutes ago
create_tar_archive.sh
Initial commit
17 minutes ago
extract_french_systems.py
Initial commit
17 minutes ago
fhir_cleaner.js
Initial commit
17 minutes ago
fileMonitor.js
Initial commit
17 minutes ago
fix-r5-to-r4.sh
Initial commit
17 minutes ago
fix_all_syntax.js
Initial commit
17 minutes ago
fix_converter.js
Initial commit
17 minutes ago
fix_json_syntax.py
Initial commit
17 minutes ago
french_terminology_adapter.js
Initial commit
17 minutes ago
french_terminology_service.js
Initial commit
17 minutes ago
french_terminology_service_offline.js
Initial commit
17 minutes ago
generated-icon.png
Initial commit
17 minutes ago
get_french_terminology.py
Initial commit
17 minutes ago
hl7ToFhirConverter.js
Initial commit
17 minutes ago
hl7_parser.js
Initial commit
17 minutes ago
hl7_parser_bridge.js
Initial commit
17 minutes ago
hl7_parser_service.py
Initial commit
17 minutes ago
main.sh
Initial commit
17 minutes ago
minimal_test.js
Initial commit
17 minutes ago
minimal_test_hl7parser.js
Initial commit
17 minutes ago
mllp_service.js
Initial commit
17 minutes ago
package-lock.json
Initial commit
17 minutes ago
package.json
Initial commit
17 minutes ago
pom.xml
Initial commit
17 minutes ago
prepare_release.sh
Initial commit
17 minutes ago
pyproject.toml
Initial commit
17 minutes ago
run.sh
Initial commit
17 minutes ago
sample_hl7.txt
Initial commit
17 minutes ago
server.js
Initial commit
17 minutes ago
simple_hl7_test.js
Initial commit
17 minutes ago
start.sh
Initial commit
17 minutes ago
test_cleaner.js
Initial commit
17 minutes ago
test_converter.js
Initial commit
17 minutes ago
test_french_terminology.js
Initial commit
17 minutes ago
test_french_tools.sh
Initial commit
17 minutes ago
test_hl7_parser.js
Initial commit
17 minutes ago
uv.lock
Initial commit
17 minutes ago
verify_french_oids.js
Initial commit
17 minutes ago
Repository files navigation
README
FHIRHub - Convertisseur HL7 v2.5 vers FHIR R4
Service de conversion de messages HL7 v2.5 vers FHIR R4, compatible avec les terminologies et standards français définis par l'ANS (Agence du Numérique en Santé).

Version FHIR HL7 Terminologie

Présentation
FHIRHub est un service complet de conversion des messages HL7 v2.5 vers le format FHIR R4 (v4.0.1), conforme aux exigences de l'Agence du Numérique en Santé (ANS) pour les systèmes de santé français. Cette solution permet l'interopérabilité des systèmes d'information de santé en France en assurant une conversion fiable et conforme aux standards.

Fonctionnalités principales
Conversion HL7 vers FHIR: Transformation complète et fidèle des messages HL7 v2.5 en ressources FHIR R4
Surveillance de répertoire: Détection et traitement automatique des fichiers HL7 déposés dans un répertoire surveillé
API REST sécurisée: Points d'accès API sécurisés par clé API pour l'intégration avec d'autres systèmes
Interface web: Interface utilisateur intuitive pour le téléchargement de fichiers et la visualisation des résultats
Compatibilité française: Intégration des systèmes de terminologie français (TRE-R316, TRE-R51, etc.)
Support des OIDs: Prise en charge des OIDs standards français (1.2.250.1.213.x.x.x)
Intégration SMT: Connexion avec le Serveur Multi-Terminologies (SMT) de l'ANS
Mode hors ligne: Fonctionnement sans connexion internet grâce aux terminologies préchargées
Nettoyage intelligent: Optimisation des ressources FHIR générées selon les bonnes pratiques
Prérequis
Node.js version 18 ou supérieure
NPM ou Yarn
Installation
Cloner le dépôt
Installer les dépendances : npm install
Configurer les répertoires d'entrée/sortie (si différents des valeurs par défaut)
Démarrer l'application : npm start
Structure du projet
/data/in : Répertoire surveillé pour les fichiers HL7 entrants
/data/out : Répertoire pour les fichiers FHIR convertis
/french_terminology : Données et mappings pour les terminologies françaises
/docs : Documentation technique et des standards
Outils de test et validation
Le projet inclut plusieurs outils pour tester et valider les fonctionnalités :

test_french_tools.sh : Script interactif pour tester les terminologies françaises
verify_french_oids.js : Outil de vérification de la cohérence des OIDs
test_french_terminology.js : Tests unitaires pour les fonctions d'adaptation
Pour exécuter les tests :

# Rendre le script exécutable
chmod +x test_french_tools.sh

# Exécuter les tests
./test_french_tools.sh
API REST
API de Conversion
GET /api/status : Vérifier l'état du serveur
GET /api/conversions : Récupérer l'historique des conversions
GET /api/conversions/:id : Obtenir une conversion spécifique
GET /api/stats : Obtenir les statistiques de conversion
POST /api/convert : Convertir du contenu HL7 en FHIR
POST /api/upload : Télécharger et convertir un fichier HL7
API de Surveillance
POST /api/monitor/start : Démarrer la surveillance des fichiers
POST /api/monitor/stop : Arrêter la surveillance des fichiers
POST /api/monitor/scan : Analyser les fichiers existants
API de Terminologie
GET /api/terminology/codesystem/:id : Accéder à un système de code français
GET /api/terminology/search : Rechercher dans les terminologies
GET /api/terminology/validate : Valider un code dans un système
POST /api/terminology/validate-bundle : Valider tous les codes dans un bundle FHIR
GET /api/terminology/configure : Obtenir la configuration du service de terminologie
POST /api/terminology/configure : Configurer l'authentification pour le SMT
GET /api/terminology/preload : Précharger les terminologies françaises principales
GET /api/terminology/oid/:oid : Obtenir un système de terminologie par son OID
GET /api/terminology/systems : Lister tous les systèmes de terminologie disponibles
Terminologies françaises
Le convertisseur est compatible avec les standards français, notamment :

L'Identifiant National de Santé (INS)
Les codes CCAM
LOINC France
NABM
Terminologies ANS (Agence du Numérique en Santé)
Exemples
Conversion HL7 via API
curl -X POST http://localhost:5000/api/convert \
  -H "x-api-key: dev-key" \
  -H "Content-Type: text/plain" \
  --data-binary @path/to/hl7file.hl7
Récupération d'un CodeSystem français
curl -X GET http://localhost:5000/api/terminology/codesystem/TRE_R11-CiviliteExercice \
  -H "x-api-key: dev-key"
Validation d'un code dans un système de terminologie
curl -X GET "http://localhost:5000/api/terminology/validate?system=https://mos.esante.gouv.fr/NOS/CCAM_2/FHIR/CCAM&code=AHQP003" \
  -H "x-api-key: dev-key"
Validation d'un bundle FHIR complet
curl -X POST http://localhost:5000/api/terminology/validate-bundle \
  -H "x-api-key: dev-key" \
  -H "Content-Type: application/json" \
  --data @path/to/fhir_bundle.json
Recherche d'un système de terminologie par OID
curl -X GET http://localhost:5000/api/terminology/oid/1.2.250.1.213.2.5 \
  -H "x-api-key: dev-key"
Liste de tous les systèmes de terminologie disponibles
curl -X GET http://localhost:5000/api/terminology/systems \
  -H "x-api-key: dev-key"
Documentation technique
Architecture du projet
Le projet FHIRHub est structuré en plusieurs modules complémentaires :

Module de conversion HL7 vers FHIR (hl7ToFhirConverter.js)
Analyse syntaxique des messages HL7 v2.5
Conversion vers les ressources FHIR R4 correspondantes
Génération de bundle FHIR conforme à la spécification
Gestion des identifiants uniques et références entre ressources
Module d'adaptation aux terminologies françaises (french_terminology_adapter.js)
Adaptation des ressources FHIR aux systèmes de terminologie français
Conversion des identifiants selon les standards ANS
Intégration des extensions françaises (INS-C, INS-NIR, etc.)
Support des OIDs officiels français
Service de terminologie (french_terminology_service_offline.js)
Accès aux terminologies françaises en mode hors ligne
Validation des codes selon les référentiels français
Recherche par OID, identifiant ou description
Gestion du cache pour optimiser les performances
Module de nettoyage FHIR (fhir_cleaner.js)
Suppression des champs vides ou non significatifs
Optimisation des ressources selon les bonnes pratiques FHIR
Correction des références relatives
Traitement spécifique pour chaque type de ressource
Serveur API REST (api.js)
Points d'accès RESTful sécurisés
Authentification par clé API
Gestion des conversions et de l'historique
Interface avec le convertisseur et les services de terminologie
Surveillance de fichiers (fileMonitor.js)
Détection des nouveaux fichiers HL7
Traitement automatique et conversion vers FHIR
Gestion des erreurs et journalisation
Organisation et archivage des fichiers
Particularités des terminologies françaises
FHIRHub intègre les spécificités des systèmes de santé français, notamment :

Identifiant National de Santé (INS)
Support complet de l'INS-NIR et INS-C
Extensions françaises pour l'INS vérifié
OIDs officiels (1.2.250.1.213.1.4.8 pour l'INS-NIR)
Gestion de la qualité de l'identifiant selon les règles de l'ANS
Terminologies ANS
TRE-R316-AutreCategorieEtablissement (OID: 1.2.250.1.213.1.6.1.239)
TRE-R51-DESCGroupe2Diplome (OID: 1.2.250.1.213.1.6.1.49)
TRE-G02-TypeProduit (OID: 1.2.250.1.71.1.2.2)
TRE-R217-ProtectionJuridique (OID: 1.2.250.1.213.1.1.4.327)
TRE-R302-ContexteCodeComplementaire (OID: 1.2.250.1.213.3.3.70)
TRE-R239-PublicPrisEnCharge (OID: 1.2.250.1.213.3.3.29)
TRE-A01-CadreExercice (OID: 1.2.250.1.213.1.1.4.9)
Mise en œuvre et déploiement
Installation standard
# Installer les dépendances
npm install

# Configurer l'environnement
cp .env.example .env
# Éditer le fichier .env pour configurer les chemins et options

# Démarrer l'application
npm start
Déploiement Docker
# Construire l'image
docker build -t fhirhub .

# Lancer le conteneur
docker run -d -p 5000:5000 \
  -v /chemin/vers/data/in:/app/data/in \
  -v /chemin/vers/data/out:/app/data/out \
  --name fhirhub \
  fhirhub
Configuration du Serveur Multi-Terminologies (SMT)
Pour utiliser le SMT en ligne (au lieu des données préchargées) :

Créer un compte sur le portail ANS : https://esante.gouv.fr/
Demander les identifiants d'API pour le SMT
Configurer l'authentification dans french_terminology/config.json :
{
  "authentication": {
    "enabled": true,
    "clientId": "VOTRE_CLIENT_ID",
    "clientSecret": "VOTRE_CLIENT_SECRET",
    "tokenUrl": "https://auth.esante.gouv.fr/auth/realms/esante-wallet/protocol/openid-connect/token"
  }
}
Contribuer au projet
Les contributions sont les bienvenues ! Pour contribuer :

Forker le dépôt
Créer une branche pour votre fonctionnalité (git checkout -b feature/nouvelle-fonctionnalite)
Committer vos changements (git commit -m 'Ajout de fonctionnalité X')
Pousser vers la branche (git push origin feature/nouvelle-fonctionnalite)
Ouvrir une Pull Request
Directives de développement
Commenter le code en français
Suivre les conventions de nommage existantes
Ajouter des tests unitaires pour les nouvelles fonctionnalités
Respecter les standards FHIR R4 et les spécifications ANS
Licence
Ce projet est sous licence MIT.

Contact
Pour toute question ou suggestion concernant ce projet, veuillez contacter l'équipe de développement ou ouvrir une issue sur GitHub.

About
replit.com/@sebastienvoerma/FhirConverter
Resources
 Readme
 Activity
Stars
 0 stars
Watchers
 1 watching
Forks
 0 forks
Releases
No releases published
Create a new release
Packages
No packages published
Publish your first package
Languages
JavaScript
67.8%
 
HTML
19.0%
 
Java
7.2%
 
Python
2.6%
 
Shell
2.4%
 
CSS
1.0%
Suggested workflows
Based on your tech stack
Grunt logo
Grunt
Build a NodeJS project with npm and grunt.
SLSA Generic generator logo
SLSA Generic generator
Generate SLSA3 provenance for your existing release workflows
Gulp logo
Gulp
Build a NodeJS project with npm and gulp.
More workflows
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact
Manage cookies
Do not share my personal information
