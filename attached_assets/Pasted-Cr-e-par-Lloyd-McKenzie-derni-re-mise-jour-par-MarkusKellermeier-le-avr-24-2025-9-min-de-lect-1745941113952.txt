Créée par Lloyd McKenzie, dernière mise à jour par MarkusKellermeier le avr. 24, 2025  9 min de lecture
1Introduction
2Status
3Servers


Introduction
This page lists FHIR servers that are publicly available for testing. These are public services provided by volunteers and HL7 makes no representations concerning their safety or reliability.

In order to avoid spam etc., the servers are generally password protected. A contact is provided to get a password.

BTW: List of publicly available test data (some of these test servers preload some of this data):

[Base: What is in the specification]
[Smart on FHIR test data]
For servers specifically for Connectathons see Connectathon Test Servers.

Status
The status of publicly available FHIR servers is monitored using UptimeRobot at https://stats.uptimerobot.com/9DArDu1Jo. If you would like a publicly available FHIR server added to the UptimeRobot status page, email [Sean McIlvenna[1]].

Servers
Note that these servers are testing servers. They may be sporadically unavailable, and as the FHIR specification is a moving target, they may not always implement the latest version, or do so correctly.

http://test.fhir.org/r2, http://test.fhir.org/r3 and http://test.fhir.org/r4 - Grahame's test server
Supports all resource types, all operations, xml + json
implementation details: open source - see [[2]]
supports Smart on FHIR
HSPC Sandbox
http://sandbox.hspconsortium.org
Free DSTU2 and STU3 open sandboxes with tools for managing data. Both personal and team sandboxes available.
Supports both open and SMART on FHIR OAuth2 access
Supports app registration for SMART on FHIR apps
Supports all resource types, all operations
http://hspconsortium.org/#/
https://healthservices.atlassian.net/wiki/display/HSPC/Healthcare+Services+Platform+Consortium
Firely Server (formerly Vonk) - .NET based FHIR Server by Firely
Demo servers
Stable
https://server.fire.ly (STU3 + R4 + R5)
Read this blogpost to learn about different ways to interact with the test server: https://fire.ly/blog/evaluating-firely-server/ 
SMART on FHIR + Bulk Data Export
https://secure.server.fire.ly/
See https://fire.ly/ebook-how-to-test-firely-server-on-inferno/ on how to interact with the authorization server.
Functionality
Generic FHIR Server, for all types of resources, all search parameters, transactions, xml + json
Supports validation (for example: POST /Patient/$validate, with a Patient resource in the body) and many plugins.
Download your own instance and more information - Documentation
For more information, contact server@fire.ly.
Kodjin FHIR Server
FHIR Server for high performance with Terminology Server capabilities
Demo public endpoint (R4):
https://demo.kodjin.com/fhir
Playground console:
https://demo.kodjin.com
Documentation:
https://docs.kodjin.com
Kodjin's Functionality: 
Supports all resource types and standard operations, including batch & transactions, validate and json/xml patch, search supports include and revinclude; support for conditional read/update/delete, create/update return preference and _summary parameter
Kodjin supports all standard FHIR and custom profiles & IGs (US Core, Carin4BB, etc.)
Supports profiles validations
Supports SMART on FHIR |  Bulk Export | Bulk Import operations
Provides FHIRpath validator with operation $apply-fhirpath
HAPI FHIR Reference Server
Supports all resources and many FHIR features including Subscriptions, Terminology Services, etc.
Fully open source (Apache 2.0 License)
Project information: http://hapifhir.io
Endpoints:
Web UI: http://hapi.fhir.org
DSTU2 Endpoint: http://hapi.fhir.org/baseDstu2
STU3 Endpoint: http://hapi.fhir.org/baseDstu3
R4 Endpoint: http://hapi.fhir.org/baseR4
R5 Endpoint: http://hapi.fhir.org/baseR5
Bulk Data Reference Server
Supports FHIR Bulk Data Access Implementation Guide
Fully open source (Apache 2.0 License)
Project information: https://smarthealthit.org/smart-hl7-bulk-data-access-flat-fhir/
R4 Endpoint: https://bulk-data.smarthealthit.org/
Spark - Open source test server developed by Firely, maintained by Kufu.
C# reference implementation, WebApi 2.0 library, Mongo DB for storage and search.
The service endpoint is at https://spark.incendi.no/.
Supports DSTU 2, STU3, R4.
Supports all resource types, all operations, xml + json
Open source: [[3]]
http://nprogram.azurewebsites.net - Rik Smithies/NProgram test server (R5)
patient, organization, diagnostic report, medication definition resources, value set resources, read only, xml + json (C#)
DSTU 2 here http://fhir-dstu2-nprogram.azurewebsites.net/
http://fhir.oridashi.com.au - Brett Esler/Oridashi demo servers overview
read-only implementation, C#, self-host web server, SQL Server DB - Facade on CIS
R4: 'Best Practice CIS' http://demo.oridashi.com.au:8304
R4: 'Medical Director CIS' http://demo.oridashi.com.au:8305
STU3: 'Best Practice CIS' http://demo.oridashi.com.au:8297
STU3: 'Medical Director CIS' http://demo.oridashi.com.au:8298
DSTU2: 'Best Practice CIS' http://demo.oridashi.com.au:8290
DSTU2: 'Medical Director CIS' http://demo.oridashi.com.au:8291
https://launch.smarthealthit.org/
Open-source app launcher + HAPI-based FHIR server
http://worden.globalgold.co.uk:8080/FHIR_a/hosted_demo.html Robert Worden / Open Mapping Software
Patient resource, read-only
Illustrates building a FHIR server on any existing application, any resource, by mapping to the application database
Tools to do this now available free, evolving
https://health-samurai.io/aidbox - Health Samurai's FHIR server as a service with free layer, register and create a new server in 1 click
Local development installation by Docker
Supports all resource types, all operations, json + xml + edn + transit + yaml, All FHIR versions
Based on fhirbase (https://www.health-samurai.io/fhirbase)
Supports SQL on FHIR
Implementation: PostgreSQL, JVM (clojure), Kubernetes
Oauth 2.0, OpenID Connect, SCIM
Access Policies
Custom Resources & First Class Extensions
Terminology Service
Extensible with Custom Operations by Aidbox SDK
Cerner's Sandbox
See our developer / API documentation for the resources that this server supports at http://fhir.cerner.com
Supports both open and OAuth 2 access
Contact us on our Google group for any issues or access to the OAuth 2 protected endpoints
Endpoints (DSTU2):
Open - https://fhir-open.cerner.com/dstu2/ec2458f2-1e24-41c8-b71b-0e701af7583d
With OAuth 2 Provider access - https://fhir-ehr-code.cerner.com/dstu2/ec2458f2-1e24-41c8-b71b-0e701af7583d
With OAuth 2 Patient access - https://fhir-myrecord.cerner.com/dstu2/ec2458f2-1e24-41c8-b71b-0e701af7583d
Endpoints (R4):
Open - https://fhir-open.cerner.com/r4/ec2458f2-1e24-41c8-b71b-0e701af7583d
With OAuth 2 Provider access - https://fhir-ehr-code.cerner.com/dstu2/ec2458f2-1e24-41c8-b71b-0e701af7583d
With OAuth 2 Patient access - https://fhir-myrecord.cerner.com/r4/ec2458f2-1e24-41c8-b71b-0e701af7583d
http://open.epic.com/Interface/FHIR - Epic's Sandbox
Supports a subset of resource types, read-only
Runs against a functional Epic database
Includes online test harness for quick syntax checking
Contact open@epic.com for more information
AEGIS WildFHIR Enterprise Edition - FHIR Reference Test Server (Last Updated May 1, 2024)
R4 Official v4.0.1 - https://wildfhir4.aegis.net/fhir4-0-1
Test client interface: https://wildfhir4.aegis.net/fhir4-0-1-gui
Supports the FHIR R4 Official (v4.0.1) version
Supports all resource types and standard operations, including json/xml patch, batch and transaction; search supports chained parameters, include and revinclude; support for conditional read/update/delete, create/update return preference and _summary parameter
STU3 Official v3.0.2 - https://wildfhir3.aegis.net/fhir3-0-2
Test client interface: https://wildfhir3.aegis.net/fhir3-0-2-gui
Supports the FHIR STU3 Official (v3.0.2) version
Supports all resource types and standard operations, including json/xml patch, batch and transaction; search supports chained parameters, include and revinclude; support for conditional read/delete, create/update return preference and _summary parameter
DSTU2 Official v1.0.2 - DECOMISSIONED
Telstra Health http://sqlonfhir-r4.azurewebsites.net/fhir - Telstra Health
Supports all resource types, but not all operations
.NET (C#) implementation on SQL Server Azure
great support for Questionnaires, and some SDC capabilities
http://health.gnusolidario.org:5000 GNU Health FHIR server
Supports read, validate and search for Patient, DiagnosticReport, Practitioner, Procedure, Observation, Condition, FamilyHistory
DSTU1
A Flask app. It's connected to the GNU Health community server database. Consequently, it's possible to create and update patients, doctors, etc. through the GNU Health frontend and the changes should be reflected on the FHIR server (indirect write support, I suppose).
I think our goal is to use the FHIR server as an adapter for non-GNU Health EHRs and users, since we already have synchronization between instances. But, there are other interesting possibilites, too.
I'm updating the code frequently and it's still in the dev stages (e.g., adding new resources frequently).
Documentation is here: https://en.wikibooks.org/w/index.php?title=GNU_Health/Using_the_FHIR_REST_server
https://stu3.ontoserver.csiro.au/fhir - CSIRO's Ontoserver - STU3 (FHIR 3.0.1)
https://r4.ontoserver.csiro.au/fhir - CSIRO's Ontoserver - R4 (FHIR 4.0.1)
Supports Terminology Services
CodeSystem, ValueSet, ConceptMap, NamingSystem, StructureDefinition, and Bundle with Read, Create, Update, Delete, Search, and Patch
$expand, $lookup, $validate-code, $closure, $find-matches, $translate, $preferred-id, $validate, and $batch
Specialised support for SNOMED CT, and LOINC
https://r5.ontoserver.csiro.au/fhir - CSIRO's Ontoserver - R5 (FHIR 5.0.0)
As for the R4 server
http://fhir.i2b2.org/open/ i2b2 FHIR server - DSTU21
Supports read and search for Patient, Observation, Condition, Medication
DSTU21
demo calls see: http://fhir.i2b2.org
Connected to demo server at https://www.i2b2.org/webclient/
https://tw171.open.allscripts.com/FHIR - Allscripts Touchworks Sandbox (OAuth)
DSTU 2.0 (v1.0.2) version of FHIR
Supports the resource types required for the Common Clinical Data Set, currently read-only
Supports OAuth validation
Supports SMART on FHIR
Runs against Allscripts Touchworks 17.1 test server
Please review our developer / API documentation at https://developer.allscripts.com/Content/fhir/content/TWFHIR17_Sandbox/
Contact Jeffrey Danford for more information about this endpoint
Contact Gunther Meyerfor OAuth setup
https://pro171.open.allscripts.com/FHIR - Allscripts Professional Sandbox (OAuth)
DSTU 2.0 (v1.0.2) version of FHIR
Supports the resource types required for the Common Clinical Data Set, currently read-only
Supports OAuth validation
Supports SMART on FHIR
Runs against Allscripts Professional 17.1 test server
Please review our developer / API documentation at https://developer.allscripts.com/content/fhir/content/Pro171_Sandbox/
Contact Jeffrey Danford for more information about this endpoint
Contact Gunther Meyerfor OAuth setup
https://scm163cu3.open.allscripts.com/FHIR - Allscripts Sunrise Sandbox (OAuth)
DSTU 2.0 (v1.0.2) version of FHIR
Supports the resource types required for the Common Clinical Data Set, currently read-only
Supports OAuth validation
Supports SMART on FHIR
Runs against Allscripts Sunrise 16.3 CU3 test server
Please review our developer / API documentation at https://developer.allscripts.com/Content/fhir/content/SCM163CU3_Sandbox/
Contact Jeffrey Danford for more information about this endpoint
Contact Gunther Meyerfor OAuth setup
http://twdev.open.allscripts.com/FHIR - Allscripts STU3 Sandbox (OAuth)
STU 3.0 (v1.8.0) version of FHIR
Supports the resource types required for the Common Clinical Data Set, currently read-only
Supports OAuth validation
Supports SMART on FHIR
Runs against Allscripts Touchworks 17.1 test server
Please review our developer / API documentation at https://developer.allscripts.com/fhir
Contact Jeffrey Danford for more information about this endpoint
Contact Gunther Meyerfor OAuth setup
http://52.72.172.54:8080/fhir/home - Michigan Health Information Network (open)
1000s of realistic test patient records
https://fhir.careevolution.com/Master.Adapter1.WebClient/fhir - CareEvolution HIEBus
DSTU2, read-write for most resources
STU3, read-write for most resources
R4, read-write for most resources
Open DSTU2 end-point: https://fhir.careevolution.com/apitest/fhir
Protected (SMART-on-FHIR) DSTU2 end-point: https://fhir.careevolution.com/Master.Adapter1.WebClient/api/fhir
Protected (SMART-on-FHIR) STU3 end-point: https://fhir.careevolution.com/Master.Adapter1.WebClient/api/fhir-stu3
Protected (SMART-on-FHIR) R4 end-point: https://fhir.careevolution.com/Master.Adapter1.WebClient/api/fhir-r4
Supports backend services authorization - see https://fhir.careevolution.com/BackendServicesAuthorization.html for details.
All three end points support bulk data export
Contact CareEvolution if you need a login to access the protected end-point (...or for any additional information or question)
http://fhir.nestvision.com (NestVision, a Chinese medical IT company, for Chinese implementers)
NEST-FHIR: a free FHIR testing platform. Functionality starts with client conformance testing against a FHIR STU3 server, via any rest extensions on chrome browser, and will become a full functional testing platform later.
The SMART Genomics API - http://genomics-advisor.smartplatforms.org:2048/static/doc/index.html
FHIR STU3 v1.8
JSON and XML
The SMART Genomics API is built on top of SMART on FHIR
Open Source https://github.com/chaiery/FHIR-Genomics-2
Documentation:http://genomics-advisor.smartplatforms.org:2048/static/doc/index.html
Kaji - https://kaji.healthforge.io
Supports STU3
General purpose server supporting all resources, most search parameters, xml & json
Tech stack: Scala, PostgreSQL, Kubernetes
JPA HL7 FHIR Server - http://fhir.com.vn:8181
Promotes HL7 FHIR development in Vietnam
Phast's Standard Terminology Services STS - https://jade.phast.fr/resources-server/api/FHIR/
Basic authentication: username = Connectathon   password = Connectathon_052020
FHIR R4
JSON and XML
Terminology server with terminologies SNOMED CT, LOINC, EDQM Standard Terms, all FHIR-defined code systems ...
Support ECL for SNOMED CT
Resources: CodeSystem, ValueSet, ConceptMap, NamingSystem, TerminologyCapabilities
interactions: read, vread, update, delete, create
common parameters: _tag, _profile, _security, _text, _content, _list, _format, _query, _filter
common search parameters: _lastUpdated, _has, _type, _id
common search result parameters: _sort, _count, _include, _revinclude
operations on CodeSystem (GET & POST): lookup, validate-code, subsumes
operations on ValueSet (GET & POST): expand, validate-code
operations on ConceptMap (GET & POST): translate, closure

NLM's HAPI FHIR servers (reset weekly):
https://lforms-fhir.nlm.nih.gov/baseDstu3

https://lforms-fhir.nlm.nih.gov/baseR4

4.7 million Observations from 2048 patients (deidentified); tag: “ri-10k”

Also has generated data and sample resources from FHIR

Helios FHIR Server
http://r4.heliossoftware.com/fhir - open sandbox
Supports R4 read and write for all FHIR Resource types
JSON and XML support
Helios Software


Meld Sandbox
https://meld.interop.community/
Supports DSTU2, STU3, R4 and will support R5 in the future
Sandboxes can be created, and shared with other users
It supports SMART on FHIR applications and registration
It supports both open and closed endpoints using Oauth 2.0
https://interop.community/

Edifecs FHIR Server
https://fhir.collablynk.com/edifecs/fhir/R4/
Supports R4
Supports SMART on FHIR flow
Supports OAuth 2.0
Details and first steps: contact artem.sopin@edifecs.com to get the document


Optum:
Public Directories (Open): https://public.fhir.stage.flex-nonprod.optum.com/R4



UPMC (FHIR R4 Server)
https://www.upmchealthplan.com/interop/ (sign-up and information)


Athenahealth
Onboarding Instructions with public sandbox https://docs.athenahealth.com/api/guides/onboarding-overview
List of supported FHIR APIs https://docs.athenahealth.com/api/fhir-apis?f=fhir
Support for DSTU2 and R4
Support for SMART on FHIR (standalone and EHR launch)


KeFHIR (Kodality FHIR server)
Sandbox: https://kefhir.kodality.dev/fhir
Wiki with documentation: https://wiki.kodality.dev/en/fhir-server
Open-source
May be used as
generic FHIR Server for all types of resources, all search parameters, xml + json
library inside your app
or as intermediary server (beta)
Supports R4; will support R5 in the future; STU1, DSTU2 and STU3 archieved
Supports validation, Oauth 2.0 and many plugins.


TIMS Biomed
Published by the TIMS group. Provides a unique set of ontologies/terminologies/vocabularies, with unique features such as text search and SSSOM-formatted mappings.
CodeSystems loaded: ICD10CM, RxNorm, SNOMED-CT, Mondo, HPO, CompLOINC, OMOP vocabularies
More information: https://www.timsbiomed.org/terminology-server/


Whitefox AU Core FHIR Test Server
FHIR Version: R4
Profile: AU Core v1.0.0-ballot
Preloaded Dataset (Sparked Test Data): AU FHIR Test Data
FHIR Server Source code (Based on HAPI): Whitefox AU Core FHIR Test Server
Articles:
From Concept To Implementation
Testing FHIR AU Implementations With Inferno A Comprehensive Guide
Endpoints:
Web UI: https://fhir.whitefox.cloud/
FHIR Base URL: https://fhir.whitefox.cloud/fhir
Contact Us: Whitefox Cloud Consulting


HealthEdgents™ | Modular FHIR® foundation for real-time healthcare applications at the point of care. Specifically designed for application developers building scalable, interoperable solutions – and optimized for powerful, context-aware experiences with AI agents. Highlights:
Next-generation web technology: Lightweight, fast, and scalable – edge-first and fully implemented in TypeScript.
Focused on real applications: Built to let teams focus on actual use cases – not infrastructure..
Maintainable architecture: Event Sourcing, CQRS, and Domain-Driven Design – for clear and durable structures.
Modular & FHIR®-compliant: Microservice-based, extensible, and free from platform lock-in.
Auditable plug-ins & MCP-ready: Standardized interfaces for agents, apps, and logic – transparent and securely integrated.
Secure access control: RBAC/ABAC, OAuth 2.0, with plug-ins for Keycloak, Ory, and more.
Monitoring, Developer Tools & much more
🔗 Request your trial access: https://atollee.com/en/PlaygroundOpenAPI
