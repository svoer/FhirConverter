@echo off
setlocal enableextensions

echo ==========================================================
echo      Installation de FHIRHub - Convertisseur HL7 vers FHIR
echo ==========================================================

REM D√©finir les variables pour Node.js int√©gr√©
set NODE_VERSION=20.15.1
set NODE_DIR=node-v%NODE_VERSION%-win-x64
set NODE_ARCHIVE=%NODE_DIR%.zip
set NODE_URL=https://nodejs.org/download/release/v%NODE_VERSION%/%NODE_ARCHIVE%
set NODE_LOCAL_PATH=vendor\nodejs
set TEMP_PATH=vendor\temp

REM Cr√©er le r√©pertoire vendor s'il n'existe pas
if not exist "vendor" mkdir vendor
if not exist "vendor\temp" mkdir vendor\temp

REM V√©rification de l'environnement
echo [1/7] V√©rification de l'environnement...

goto :check_system_nodejs

REM Fonction pour t√©l√©charger et installer Node.js localement
:install_local_nodejs
echo üì¶ Installation locale de Node.js v%NODE_VERSION%...

REM V√©rifier si l'archive existe d√©j√†
if not exist "vendor\%NODE_ARCHIVE%" (
  echo    T√©l√©chargement de Node.js v%NODE_VERSION%...
  
  REM T√©l√©chargement avec PowerShell
  powershell -Command "& {[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; (New-Object Net.WebClient).DownloadFile('%NODE_URL%', 'vendor\%NODE_ARCHIVE%')}"
  
  if %errorlevel% neq 0 (
    echo ‚ùå √âchec du t√©l√©chargement de Node.js. Erreur PowerShell: %errorlevel%
    echo    Essai avec bitsadmin...
    
    REM Tentative avec bitsadmin si PowerShell √©choue
    bitsadmin /transfer nodeDownload /download /priority normal %NODE_URL% "%cd%\vendor\%NODE_ARCHIVE%"
    
    if %errorlevel% neq 0 (
      echo ‚ùå √âchec du t√©l√©chargement avec bitsadmin. Veuillez t√©l√©charger manuellement Node.js v%NODE_VERSION% depuis:
      echo    %NODE_URL%
      echo    et placez-le dans le dossier vendor.
      exit /b 1
    )
  )
) else (
  echo    Archive Node.js d√©j√† t√©l√©charg√©e.
)

REM Extraire l'archive si le r√©pertoire n'existe pas
if not exist "%NODE_LOCAL_PATH%" (
  echo    Extraction de Node.js...
  mkdir "%NODE_LOCAL_PATH%" 2>nul
  
  REM Extraction avec PowerShell
  powershell -Command "& {Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::ExtractToDirectory('vendor\%NODE_ARCHIVE%', 'vendor\temp')}"
  
  if %errorlevel% neq 0 (
    echo ‚ùå √âchec de l'extraction de Node.js.
    exit /b 1
  )
  
  REM D√©placer les fichiers extraits
  xcopy "vendor\temp\%NODE_DIR%\*" "%NODE_LOCAL_PATH%\" /E /Y /Q
  rmdir /s /q "vendor\temp\%NODE_DIR%"
) else (
  echo    Node.js d√©j√† extrait.
)

REM V√©rifier l'installation
if not exist "%NODE_LOCAL_PATH%\node.exe" (
  echo ‚ùå L'installation de Node.js local a √©chou√©.
  exit /b 1
)

set USE_LOCAL_NODEJS=1
echo ‚úÖ Node.js v%NODE_VERSION% install√© localement avec succ√®s.
goto :nodejs_choice_done

REM D√©terminer si Node.js est d√©j√† install√© sur le syst√®me
:check_system_nodejs
set use_system_nodejs=0
set use_local_nodejs=1

where node >nul 2>nul
if %errorlevel% equ 0 (
  REM Node.js est install√©, v√©rifier la version
  for /f "tokens=* usebackq" %%i in (`node -v`) do set NODE_FULL_VERSION=%%i
  echo Version Node.js complete: %NODE_FULL_VERSION%
  
  REM Extraire juste la version majeure (v18.x.x -> 18)
  set SYSTEM_NODE_VERSION=%NODE_FULL_VERSION:~1,2%
  if "%SYSTEM_NODE_VERSION:~1,1%"=="." set SYSTEM_NODE_VERSION=%SYSTEM_NODE_VERSION:~0,1%
  echo Version majeure extraite: %SYSTEM_NODE_VERSION%
  
  if %SYSTEM_NODE_VERSION% GEQ 18 (
    if %SYSTEM_NODE_VERSION% LEQ 20 (
      echo ‚úÖ Node.js v%SYSTEM_NODE_VERSION% trouv√© et compatible.
      echo    Options disponibles:
      echo    1) Utiliser Node.js v%SYSTEM_NODE_VERSION% du syst√®me
      echo    2) Installer Node.js v%NODE_VERSION% localement (recommand√© pour la compatibilit√©)
      echo.
      choice /c 12 /m "Votre choix (1 ou 2)"
      
      if errorlevel 2 (
        echo    ‚úì Installation et utilisation de Node.js v%NODE_VERSION% localement...
        goto :install_local_nodejs
      ) else (
        echo    ‚úì Utilisation de Node.js du syst√®me.
        set use_system_nodejs=1
        set use_local_nodejs=0
      )
    ) else (
      echo ‚ö†Ô∏è Node.js v%SYSTEM_NODE_VERSION% d√©tect√©, mais trop r√©cent pour FHIRHub.
      echo    Installation de Node.js v%NODE_VERSION% localement pour assurer la compatibilit√©...
      goto :install_local_nodejs
    )
  ) else (
    echo ‚ö†Ô∏è Node.js v%SYSTEM_NODE_VERSION% d√©tect√©, mais trop ancien pour FHIRHub.
    echo    Installation de Node.js v%NODE_VERSION% localement pour assurer la compatibilit√©...
    goto :install_local_nodejs
  )
) else (
  echo ‚ùì Node.js non d√©tect√© sur le syst√®me.
  echo    Installation de Node.js v%NODE_VERSION% localement...
  goto :install_local_nodejs
)

:nodejs_choice_done

REM Modification du script de d√©marrage pour utiliser le Node.js local si n√©cessaire
if %use_local_nodejs% equ 1 (
  REM Sauvegarder une copie du script de d√©marrage original si n√©cessaire
  if not exist "start.bat.orig" (
    copy start.bat start.bat.orig >nul
  )
  
  REM Cr√©er un nouveau script de d√©marrage qui utilise le Node.js local
  echo @echo off> start_temp.bat
  echo setlocal enableextensions>> start_temp.bat
  echo.>> start_temp.bat
  echo REM Script de d√©marrage g√©n√©r√© par le programme d'installation>> start_temp.bat
  echo REM Utilise Node.js v%NODE_VERSION% local>> start_temp.bat
  echo.>> start_temp.bat
  echo echo D√©marrage de FHIRHub - Convertisseur HL7 v2.5 vers FHIR R4>> start_temp.bat
  echo echo Initialisation du syst√®me de conversion HL7 vers FHIR...>> start_temp.bat
  echo.>> start_temp.bat
  echo if exist ".nodejsrc" (>> start_temp.bat
  echo   echo Configuration Node.js locale d√©tect√©e...>> start_temp.bat
  echo.>> start_temp.bat
  echo   if exist "%NODE_LOCAL_PATH%\node.exe" (>> start_temp.bat
  echo     echo ‚úì Utilisation de Node.js local v%NODE_VERSION%>> start_temp.bat
  echo     "%cd%\%NODE_LOCAL_PATH%\node.exe" app.js>> start_temp.bat
  echo   ^) else (>> start_temp.bat
  echo     echo ‚ö†Ô∏è Node.js local non trouv√©, utilisation de Node.js syst√®me...>> start_temp.bat
  echo     node app.js>> start_temp.bat
  echo   ^)>> start_temp.bat
  echo ^) else (>> start_temp.bat
  echo   echo Node.js syst√®me utilis√©>> start_temp.bat
  echo   node app.js>> start_temp.bat
  echo ^)>> start_temp.bat
  echo.>> start_temp.bat
  echo pause>> start_temp.bat
  
  REM Remplacer l'ancien script par le nouveau
  move /y start_temp.bat start.bat >nul
  echo    ‚úì Script de d√©marrage modifi√© pour utiliser Node.js local.
)

REM Configurer les variables pour l'installation
if %use_local_nodejs% equ 1 (
  set NODE_CMD=%cd%\%NODE_LOCAL_PATH%\node.exe
  set NPM_CMD=%cd%\%NODE_LOCAL_PATH%\npm.cmd
) else (
  set NODE_CMD=node
  set NPM_CMD=npm
)

echo ‚úÖ Environnement compatible (Node.js v%NODE_VERSION%)

REM Cr√©ation des r√©pertoires n√©cessaires
echo [2/7] Cr√©ation des r√©pertoires...
if not exist "data\conversions" mkdir data\conversions
if not exist "data\history" mkdir data\history
if not exist "data\outputs" mkdir data\outputs
if not exist "data\test" mkdir data\test
if not exist "logs" mkdir logs
if not exist "backups" mkdir backups
echo ‚úì Structure des dossiers de donn√©es cr√©√©e

REM Installation des d√©pendances
echo [3/7] Installation des d√©pendances...

REM V√©rification du fichier package.json
if not exist "package.json" (
  echo X Erreur: Fichier package.json introuvable.
  echo   Cr√©ation d'un fichier package.json par d√©faut...
  
  echo {^
  "name": "fhirhub",^
  "version": "1.0.0",^
  "description": "Convertisseur HL7 vers FHIR avec terminologies fran√ßaises",^
  "main": "app.js",^
  "scripts": {^
    "start": "node app.js",^
    "dev": "nodemon app.js"^
  },^
  "dependencies": {^
    "better-sqlite3": "^8.5.0",^
    "body-parser": "^1.20.2",^
    "cors": "^2.8.5",^
    "dotenv": "^16.0.3",^
    "express": "^4.18.2",^
    "fhir": "^4.12.0",^
    "fhir.js": "^0.0.22",^
    "helmet": "^7.0.0",^
    "hl7-parser": "^1.0.1",^
    "hl7-standard": "^1.0.2",^
    "jsonwebtoken": "^9.0.0",^
    "morgan": "^1.10.0",^
    "simple-hl7": "^3.2.0",^
    "swagger-jsdoc": "^6.2.8",^
    "swagger-ui-express": "^4.6.3",^
    "uuid": "^9.0.0"^
  },^
  "devDependencies": {^
    "nodemon": "^2.0.22"^
  }^
}> package.json
)

REM Suppression complet du node_modules s'il existe pour une installation propre
if exist "node_modules" (
  echo Suppression des modules existants pour une installation propre...
  rmdir /s /q node_modules
)

echo Installation des d√©pendances Node.js...
call %NPM_CMD% cache clean --force
echo Nettoyage du cache npm termin√©

REM Utiliser npm install avec l'option --no-optional pour √©viter les probl√®mes de compilation sous Windows
echo Installation des packages avec --no-optional pour √©viter les probl√®mes de compilation...
call %NPM_CMD% install --no-optional

REM V√©rifier que les d√©pendances critiques sont bien install√©es
echo V√©rification des d√©pendances critiques...
if not exist "node_modules\express" (
  echo D√©pendance express manquante. Installation sp√©cifique...
  call %NPM_CMD% install express --save
)
if not exist "node_modules\better-sqlite3" (
  echo D√©pendance better-sqlite3 manquante. Installation sp√©cifique...
  call %NPM_CMD% install better-sqlite3 --save
)

REM Configuration de l'environnement
echo [4/7] Configuration de l'environnement...
if not exist ".env" (
  echo PORT=5000> .env
  echo DB_PATH=./data/fhirhub.db>> .env
  echo LOG_LEVEL=info>> .env
  echo JWT_SECRET=>> .env
  echo ‚úì Fichier .env cr√©√© avec succ√®s
) else (
  echo ‚ÑπÔ∏è Fichier .env existant conserv√©
)

REM Initialisation de la base de donn√©es
echo [5/7] Initialisation de la base de donn√©es...
echo [TERMINOLOGY] Pr√©paration des terminologies fran√ßaises...

REM V√©rifier que le dossier french_terminology existe et contient les fichiers n√©cessaires
if not exist "french_terminology" (
  echo ‚ö†Ô∏è Le dossier french_terminology n'existe pas. Cr√©ation...
  mkdir french_terminology
  mkdir french_terminology\cache
)

REM Cr√©er ou v√©rifier le fichier de configuration des OIDs
if not exist "french_terminology\ans_oids.json" (
  echo ‚ö†Ô∏è Cr√©ation du fichier ans_oids.json par d√©faut...
  echo {^
  "version": "1.0.0",^
  "lastUpdated": "2025-04-28T10:15:30Z",^
  "systems": {^
    "ins": "urn:oid:1.2.250.1.213.1.4.8",^
    "rpps": "urn:oid:1.2.250.1.71.4.2.1",^
    "adeli": "urn:oid:1.2.250.1.71.4.2.2",^
    "finess": "urn:oid:1.2.250.1.71.4.2.2"^
  }^
}> french_terminology\ans_oids.json
)

REM Cr√©er ou v√©rifier le fichier de codes communs
if not exist "french_terminology\ans_common_codes.json" (
  echo ‚ö†Ô∏è Cr√©ation du fichier ans_common_codes.json par d√©faut...
  echo {^
  "version": "1.0.0",^
  "lastUpdated": "2025-04-28T10:15:30Z",^
  "codeSystemMap": {^
    "profession": "https://mos.esante.gouv.fr/NOS/TRE_G15-ProfessionSante/FHIR/TRE-G15-ProfessionSante",^
    "specialite": "https://mos.esante.gouv.fr/NOS/TRE_R38-SpecialiteOrdinale/FHIR/TRE-R38-SpecialiteOrdinale"^
  }^
}> french_terminology\ans_common_codes.json
)

REM Cr√©er ou v√©rifier le fichier des syst√®mes de terminologie
if not exist "french_terminology\ans_terminology_systems.json" (
  echo ‚ö†Ô∏è Cr√©ation du fichier ans_terminology_systems.json par d√©faut...
  echo {^
  "version": "1.0.0",^
  "lastUpdated": "2025-04-28T10:15:30Z",^
  "systems": {^
    "LOINC": "http://loinc.org",^
    "UCUM": "http://unitsofmeasure.org",^
    "SNOMED-CT": "http://snomed.info/sct"^
  }^
}> french_terminology\ans_terminology_systems.json
)

REM V√©rifier que la configuration est compl√®te
if not exist "french_terminology\config.json" (
  echo ‚ö†Ô∏è Cr√©ation du fichier config.json par d√©faut...
  echo {^
  "version": "1.0.0",^
  "lastUpdated": "2025-04-28T10:15:30Z",^
  "cacheEnabled": true,^
  "cacheDuration": 86400,^
  "defaultLanguage": "fr"^
}> french_terminology\config.json
)

REM Configuration de Node.js
echo [6/7] Configuration du syst√®me Node.js...

REM Cr√©er un fichier de configuration pour Node.js
if %use_local_nodejs% equ 1 (
  echo Enregistrement de la configuration Node.js locale...
  
  echo {^
  "use_local_nodejs": true,^
  "node_version": "%NODE_VERSION%",^
  "node_path": "%NODE_LOCAL_PATH%",^
  "installation_date": "%date:~6,4%-%date:~3,2%-%date:~0,2%"^
}> .nodejsrc
  
  echo ‚úì Configuration Node.js locale enregistr√©e
)

REM Finalisation
echo [7/7] Finalisation de l'installation...

echo ==========================================================
echo      ‚úì Installation de FHIRHub termin√©e avec succ√®s
echo ==========================================================
echo.
echo Pour d√©marrer l'application :
echo   start.bat
echo.
echo Site web accessible sur : http://localhost:5000
echo Identifiants par d√©faut :
echo   Utilisateur : admin
echo   Mot de passe : adminfhirhub
echo.
echo Cl√© API de test : dev-key
echo Documentation API : http://localhost:5000/api-docs
echo ==========================================================

pause